#!/usr/bin/perl -w

use strict;
use warnings;

# if not root, exec via sudo
if ($< != 0) {
	print "This script needs to run as root. Re-execing via sudo.\n";
	exec '/usr/bin/sudo', 'perl', $0, @ARGV;
}

my $pid2so = {};
my $so2pid = {};
my $so2prog = {};
my $pid2prog = {};
my $prog2pid = {};
my $prog2so = {};

chdir("/proc/");

opendir PROC, ".";

while (my $pid = readdir PROC) {

	next unless $pid =~ /^\d+$/;

	check_pid_maps($pid);

}

foreach my $pid (sort keys %{$pid2so}) {

	next unless scalar @{$pid2so->{$pid}};

	my $prog = $pid2prog->{$pid};

	print "Running process $prog (pid $pid) references mismatched inodes for " . scalar(@{$pid2so->{$pid}}) . " files\n";
}

foreach my $prog (keys %{$prog2so}) {

	print "Program $prog (" . scalar @{$prog2pid->{$prog}} . " pids) references mismatched inodes for " . scalar(@{$prog2so->{$prog}}) . " files\n";

}

foreach my $file (keys %{$so2pid}) {

	next unless scalar @{$so2pid->{$file}};

	my $progs = {};
	map { $progs->{$pid2prog->{$_}} = 1 } @{$so2pid->{$file}};

	print "Update to $file requires restart of " . scalar(keys(%{$progs})) . " programs (" . scalar(@{$so2pid->{$file}}). " pids)\n";
}

sub check_pid_maps {
	my ($pid) = @_;

	my $ret = open MAPS, "$pid/maps";

	next unless $ret;

	$pid2so->{$pid} = [];

	while (<MAPS>) {

		chomp;
		my @e = split /\s+/;

		my $inode = $e[4];
		my $file = $e[5];

		if ($file and -x $file) {
			my @s = stat $file;

			my $r_inode = $s[1];

			if (!defined($so2pid->{$file})) {
				$so2pid->{$file} = [];
			}

			if ($inode ne $r_inode) {

				my $prog = readlink "$pid/exe";
				$pid2prog->{$pid} = $prog;

				if (!defined($prog2pid->{$prog})) {
					$prog2pid->{$prog} = [];
				}

				if (!defined($prog2so->{$prog})) {
					$prog2so->{$prog} = [];
				}

				push_if_not_in($pid, $prog2pid->{$prog});
				push_if_not_in($file, $pid2so->{$pid});
				push_if_not_in($pid, $so2pid->{$file});
				push_if_not_in($prog, $so2prog->{$file});
				push_if_not_in($file, $prog2so->{$prog});
			}

		}

	}

	close MAPS;

}

sub push_if_not_in {
	my ($needle, $haystack) = @_;

	return unless $needle;

	push @{$haystack}, $needle if (!in_array($needle, @{$haystack}));
}

sub in_array {
	my ($needle, @haystack) = @_;

	foreach my $hay (@haystack) {
		return 1 if $hay eq $needle;
	}

	return 0;
}

