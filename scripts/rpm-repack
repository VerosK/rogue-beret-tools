#!/usr/bin/perl -w

#
# TODO: KB wants a .nosrc.rpm built as well
#

use strict;
use warnings;

use Getopt::Long;
use File::Temp qw(tempdir tempfile);

my $dry_run = 0;
my $verbose = 0;
my $rpm_pkg;
my $rpm_file;

my $getopt = GetOptions(
	'dry-run' => \$dry_run,
	'verbose' => \$verbose,
	'p=s' => \$rpm_pkg,
	'f=s' => \$rpm_file,
);

if (!$getopt) {
	&usage;
}

if (!$rpm_pkg and !$rpm_file) {
	&usage("You must specify either -p or -f");
}

if ($rpm_pkg and $rpm_file) {
	&usage("The -p and -f switches can't both be specified");
}

my $rpm_cmd;
my $rpm_target;
my $rpm = {};

if ($rpm_pkg) {
	$rpm_target = $rpm_pkg;
} elsif ($rpm_file) {
	$rpm_target = $rpm_file;
} else {
	print "Error; getopt with -p or -f didn't work\n";
	exit 1;
}

#
# make sure $rpm_file exists and is an RPM
#

if ($rpm_file and !-f $rpm_file) {
	print "File does not exist: $rpm_file\n";
	&usage;
}

if ($rpm_file) {
	open RPM, "file $rpm_file|";
	my $file_out = <RPM>;
	close RPM;

	if ((split /:/, $file_out)[1] !~ / rpm /i) {
		print "File is not an RPM: $rpm_file\n";
		exit 1;
	}
}

if ($rpm_pkg) {
	open RPM, "rpm -q $rpm_pkg|";
	my $file_out = <RPM>;
	close RPM;

	if ($file_out =~ /is not installed/i) {
		print "The $rpm_pkg package is not installed\n";
		exit 1;
	}
}

#
# collect the meta info in this package
#

$rpm_cmd = 'rpm -q' . ( $rpm_file ? 'p' : '' ) . ' --qf=\'%{name}\n%{version}\n%{release}\n%{arch}\n%{packager}\n%{summary}\n%{group}\n%{distribution}\n%{license}\n%{vendor}\n%{description}\n\'';

&vprint("Running: $rpm_cmd $rpm_target");

open RPM, "$rpm_cmd $rpm_target|";

chomp($rpm->{name} = <RPM>);
chomp($rpm->{version} = <RPM>);
chomp($rpm->{release} = <RPM>);
chomp($rpm->{arch} = <RPM>);
chomp($rpm->{packager} = <RPM>);
chomp($rpm->{summary} = <RPM>);
chomp($rpm->{group} = <RPM>);
chomp($rpm->{distribution} = <RPM>);
chomp($rpm->{license} = <RPM>);
chomp($rpm->{vendor} = <RPM>);

# description is whatever is left
my @description = <RPM>;

$rpm->{description} = join "", @description;

close RPM;

#
# collect the scripts in this package
#

# TODO: apparently rpm query tags include postin, prein, postun, and preun; but for now this works just fine

$rpm_cmd = 'rpm -q' . ( $rpm_file ? 'p' : '' ) . ' --scripts';

&vprint("Running: $rpm_cmd $rpm_target");

open RPM, "$rpm_cmd $rpm_target|";
my @scripts = <RPM>;
close RPM;

my $current_script_name = "";
my $current_script = "";

foreach my $line (@scripts) {

	# we've reached a new script
	if ($line =~ m|^([a-zA-Z0-9]+) scriptlet( \(using \/bin\/sh\))?:|) {

		# save the old one, if there was one
		$rpm->{$current_script_name} = $current_script if $current_script_name;

		# start the new one
		$current_script_name = $1;
		$current_script = "";

		next;
	}

	$current_script .= $line;

}

$rpm->{$current_script_name} = $current_script if $current_script_name;

#
# TODO: collect provides/dependancies for this package
#

#
# get the changelog
#

$rpm_cmd = 'rpm -q' . ( $rpm_file ? 'p' : '' ) . ' --changelog';

&vprint("Running: $rpm_cmd $rpm_target");

open RPM, "$rpm_cmd $rpm_target|";
my @changelog = <RPM>;
close RPM;

$rpm->{changelog} = join "", @changelog;

# the build-root
my $tmpdir = tempdir( CLEANUP => 1 );

# what will have all the files for the package
my ($rpm_file_fh, $rpm_file_list) = tempfile( CLEANUP => 1, SUFFIX => '.txt' );

my $rpm_spec = qq~# generated by rpm-repack

Name: $rpm->{name}
Version: $rpm->{version}
Release: $rpm->{release}
Summary: $rpm->{summary}
License: $rpm->{license}
Distribution: $rpm->{distribution}
Group: $rpm->{group}
Packager: $rpm->{packager}
Provides: $rpm->{name}
BuildArch: $rpm->{arch}
BuildRoot: $tmpdir

%description
$rpm->{description}

%files -f $rpm_file_list

%install
~;

#
# add scripts to the spec file as needed
#

if ($rpm->{preinstall}) {
	$rpm_spec .= qq~
%pre
$rpm->{preinstall}

~;
}

if ($rpm->{postinstall}) {
	$rpm_spec .= qq~
%post
$rpm->{postinstall}

~;
}

if ($rpm->{preuninstall}) {
	$rpm_spec .= qq~
%preun
$rpm->{preuninstall}

~;
}

if ($rpm->{postuninstall}) {
	$rpm_spec .= qq~
%postun
$rpm->{postuninstall}

~;
}

if ("(none)" ne $rpm->{changelog}) {
	$rpm_spec .= qq~

%changelog
$rpm->{changelog}
~;
}

#
# build the new RPM
#

if ($dry_run) {

	# dry run, just print out the spec file
	print $rpm_spec;

} else {

	&vprint("Unpacking $rpm_target");

	if ($rpm_file) {
		`cd $tmpdir && rpm2cpio $rpm_target | cpio -id > /dev/null`;
	} else {
		`cd $tmpdir && rpm -ql $rpm_target | cpio -c -o 2> /dev/null | cpio -id 2> /dev/null`
	}

	# print out all the files in the package to the file list
	print $rpm_file_fh `find $tmpdir ! -type d | sed 's|^$tmpdir||'`;

	# get a file to hold the spec
	my ($fh, $rpm_spec_filename) = tempfile( CLEANUP => 1, SUFFIX => '.spec' );

	print $fh $rpm_spec;

	&vprint("Running: rpmbuild -bb $rpm_spec_filename");

	system ("rpmbuild -bb $rpm_spec_filename");

}

sub usage {
	my ($msg) = @_;
	if ($msg) { print $msg, "\n"; }
	print "Usage: $0 [-p pkg_name] [-f rpm_file] /path/to/rpm\n";
	exit 1;
}

sub vprint {
	print join("", @_), "\n" if $verbose;
}

